// 2022-06-15 수업


// 함수(Function)
// : 편의상 특정 기능의 반복 수행에 있어서,
//   코드의 중복을 방지하고 여러 번 반복 사용이 용이하도록
//   일련의 기능을 하는 명령문을 모아둔 것.

// 함수의 사용
// : 선언, 정의, 호출의 3가지를 통하여 사용이 가능함.
//   * 선언: 해당 기능(일련의 명령문)의 이름을 정해주는 것
//   * 정의: 해당 이름의 표현에 대한 기능을 알려주는 것
//   * 호출: 해당 이름의 표현에 대한 기능을 실행하라는 명령을 내리는 것

// 함수의 형태
// 반환형 함수이름(매개변수 목록)						-> 함수의 선언
// {
//     호출 시에 실행할 코드 블럭(= 함수의 몸체));		-> 함수의 정의
// }
//
// * 반환형: 함수가 실행된 후 결과를 반환할 데이터의 자료형.
//           void 의 경우에는 반환하는 것이 없다는 것을 의미함 (void = 공허함).
// * 함수이름: 함수 호출 시에 사용할 이름.
// * 매개변수 목록: 함수 호출 시에 필요한 데이터를 받아들이기 위한 변수의 목록.
//                 (참고) 함수의 호출부에 입력되는 변수는 '인자', 또는 '인수'라고 표현한다.
// * 함수의 몸체: 함수 호출 시에 실행할 코드 블럭.

#include <iostream>
#include <Windows.h>
#include <string>
#pragma warning(disable : 4996)

// 아래와 같은 (사용자 정의) 함수를 선언하여 이용할 수 있음.
// 1) 반환형과 매개변수가 모두 없는 함수.
void Loading()
{
	char str[21] = "";

	for (int i = 0; i < 10; i++)
	{
		// strcat(str1, str2); -> string concatenate (문자열 연결)
		// : str1의 뒤에 str2를 이어붙이는 함수.
		strcat(str, "■");
		printf("%s\n", str);
		Sleep(300);
		system("cls");
	}
}

// 2) 반환형이 있고 매개변수가 없는 함수.
int GetSeven()
{
	for (int i = 5; i != 0; i--)
	{
		printf("GetSeven 함수 실행 중: %i\n", i);
		Sleep(300);
	}

	return 7;		// 함수 종료 시에 반환할 데이터.
}

// 3) 반환형이 없고 매개변수가 있는 함수.
void MyAddition(int a, int b)
{ printf("%i + %i = %i", a, b, a + b); }



int main()
{
	/*printf("1) 반환형과 매개변수가 모두 없는 함수.\n");
	Loading();*/

	//printf("2) 반환형이 있고 매개변수가 없는 함수.\n");
	//GetSeven();
	//printf("함수의 반환값을 출력할 수 있음 -> %i\n", GetSeven());
	//int seven = GetSeven();
	//printf("함수의 반환값을 변수에 저장 후 출력 가능 -> %i\n", seven);

	printf("3) 반환형이 없고 매개변수가 있는 함수.\n");
	int a = 1;
	int b = 2;
	MyAddition(a, b);

	return 0;
}